
#user  nobody;
worker_processes  1;
daemon on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # thread-shared cache in openrestry
    lua_shared_dict ngx_cache 1m;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # close lua_code_cache for development
        # CAUTION: open it for highest performance when in the production env
        lua_code_cache off;

        # set default file format, or download prompt will show
        default_type text/html;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # use content_by_lua, write lua code in nginx.conf directly
        # start
        location /hello {
            content_by_lua '
                ngx.say("<p>hello, world.</p>")
            ';
            # can also use content_by_lua_block to do this
            #content_by_lua_block {
            #    ngx.say('<p>hello, world.</p>')
            #}
        }
        # end

        # use content_by_lua_file, write lua code in independent .lua file(RECOMMENDED)
        # start
        location ~ ^/api/([\w_]+) {
            content_by_lua_file lua/$1.lua;
        }
        # end

        # use ngx.var.request_method to display request method
        # start
        location /say {
            content_by_lua_block {
                ngx.say(ngx.var.request_method)
            }
        }
        # end


        # use ngx.location.capture to call self API 
        # start
        location /app/test {
            content_by_lua_block {
                res = ngx.location.capture("/say",{method=ngx.HTTP_POST,body="hello world"})
                ngx.say(res.body)
            }
        }
        # end


        # use ngx.redirect to redirect to self API
        # start
        location = /to_redirect {
            content_by_lua_block {
                ngx.say('now you are in /to_redirect api.')
            }
        }

        location = /ngx_redirect {
            rewrite_by_lua_block {
                return ngx.redirect('/to_redirect');
            }
        }
        # end

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
